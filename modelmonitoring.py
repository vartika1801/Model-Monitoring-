# -*- coding: utf-8 -*-
"""ModelMonitoring.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T8Vpe4lDwHTurk7jztcR--hWL_x66Ppx

**Data Drift Dashboard**
"""

try:
  import evidently
except:
  !pip install git+https://github.com/evidentlyai/evidently.git

!pip uninstall -y evidently

!pip install evidently==0.4.17

import evidently
print(evidently.__version__)

!pip install scikit-learn==1.3.2 --force-reinstall

!pip install numpy==1.24.4 --force-reinstall

import pandas as pd
import numpy as np
import requests
import zipfile
import io

from datetime import datetime, time
from sklearn import datasets, ensemble

from evidently import ColumnMapping
from evidently.report import Report
from evidently.metrics import (
    DataDriftTable,
    RegressionQualityMetric,
    RegressionPredictedVsActualPlot,
    RegressionErrorDistribution
)

"""**Bicycle Demand Data**"""

content = requests.get("https://archive.ics.uci.edu/static/public/275/bike+sharing+dataset.zip").content
with zipfile.ZipFile(io.BytesIO(content)) as arc:
  raw_data = pd.read_csv(arc.open("hour.csv"), header=0, sep=',', parse_dates=['dteday'],index_col='dteday')

raw_data.index = raw_data.apply(
    lambda row: datetime.combine(row.name, time(hour=int(row['hr']))), axis=1
)

raw_data.head()

"""**Regression Model**"""

target = 'cnt'
prediction ='prediction'
numerical_features = ['temp', 'atemp', 'hum', 'windspeed', 'hr', 'weekday']
categorical_features = ['season', 'holiday', 'workingday']

# Train model on some data and on the incoming data check how the model performs
reference = raw_data.loc['2011-01-01 00:00:00':'2011-01-28 23:00:00']
current = raw_data.loc['2011-01-29 00:00:00':'2011-02-28 23:00:00']

reference.head()

regressor = ensemble.RandomForestRegressor(random_state=0,n_estimators=50)

# fit(input features, output feature)
regressor.fit(reference[numerical_features + categorical_features], reference[target])

ref_prediction = regressor.predict(reference[numerical_features + categorical_features])
current_prediction = regressor.predict(current[numerical_features + categorical_features])

# Store prediction in prediction column
reference['prediction']=ref_prediction
current['prediction']=current_prediction

"""**Model Performance**"""

column_mapping = ColumnMapping()
# creating variables inside column_mapping
column_mapping.target = target
column_mapping.numerical_features = numerical_features
column_mapping.categorical_features = categorical_features

regression_perfomance = Report(metrics=[
    RegressionQualityMetric(),
    RegressionPredictedVsActualPlot(),
    RegressionErrorDistribution()
])
regression_perfomance.run(current_data=reference, reference_data=None, column_mapping=column_mapping)
# current_data - what the model is currenlty trained on

regression_perfomance.show()

#regression_perfomance.save('reports/regression_performance_at_training.html')
# To save the report in the form of html file

# Now analysis of change in data over few weeks

"""**Week 1**"""

regression_perfomance = Report(metrics=[
    RegressionQualityMetric(),
    RegressionPredictedVsActualPlot(),
    RegressionErrorDistribution()
])
regression_perfomance.run(current_data=current.loc['2011-01-29 00:00:00':'2011-02-07 23:00:00'], reference_data=reference, column_mapping=column_mapping)
regression_perfomance.show()

# If model performance degrading then combine new data with old data and retrain the model

# check for the target variable
target_drift = Report(metrics=[RegressionQualityMetric(),
    RegressionErrorDistribution(),
    RegressionPredictedVsActualPlot()])
target_drift.run(current_data=current.loc['2011-02-07 00:00:00':'2011-02-14 23:00:00'],
                 reference_data=reference,
                 column_mapping=column_mapping)

target_drift.show()

"""**Week 2**"""

regression_perfomance = Report(metrics=[
    RegressionQualityMetric(),
    RegressionPredictedVsActualPlot(),
    RegressionErrorDistribution()
])
regression_perfomance.run(current_data=current.loc['2011-02-07 00:00:00':'2011-02-14 23:00:00'], reference_data=reference, column_mapping=column_mapping)
regression_perfomance.show()

target_drift = Report(metrics=[RegressionQualityMetric(),
    RegressionErrorDistribution(),
    RegressionPredictedVsActualPlot()])
target_drift.run(current_data=current.loc['2011-02-07 00:00:00':'2011-02-14 23:00:00'],
                 reference_data=reference,
                 column_mapping=column_mapping)

target_drift.show()

"""**Week 3**"""

regression_perfomance = Report(metrics=[
    RegressionQualityMetric(),
    RegressionPredictedVsActualPlot(),
    RegressionErrorDistribution()
])
regression_perfomance.run(current_data=current.loc['2011-02-15 00:00:00':'2011-02-21 23:00:00'], reference_data=reference, column_mapping=column_mapping)
regression_perfomance.show()

target_drift = Report(metrics=[RegressionQualityMetric(),
    RegressionErrorDistribution(),
    RegressionPredictedVsActualPlot()])
target_drift.run(current_data=current.loc['2011-02-15 00:00:00':'2011-02-21 23:00:00'],
                 reference_data=reference,
                 column_mapping=column_mapping)

target_drift.show()

"""**Data Drift**"""

column_mapping = ColumnMapping()

column_mapping.numerical_features = numerical_features

data_drift = Report(metrics = [DataDriftTable()])
data_drift.run(current_data = current.loc['2011-01-29 00:00:00':'2011-02-07 23:00:00'],
               reference_data = reference,
               column_mapping=column_mapping)

data_drift.show()

